# -*- coding: utf-8 -*-
#worked on tab2
# Form implementation generated from reading ui file 'GUI_des.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import threading
import math
import numpy as np 
import rclpy
from functools import partial  # Add this import
from geometry_msgs.msg import PointStamped, Quaternion, Twist, Vector3Stamped  # Add this line
#from sbg_driver.msg import SbgEkfQuat
from nav_msgs.msg import Odometry 
from rclpy.qos import qos_profile_sensor_data

from rclpy.node import Node
from sensor_msgs.msg import Image, NavSatFix, Imu
from cv_bridge import CvBridge
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QBuffer, QPointF
from PyQt5.QtGui import QImage, QPixmap, QTransform, QPainter, QPainterPath, QPen, QColor
from PyQt5.QtCore import QProcess, QTextCodec
from PyQt5.QtWidgets import QGraphicsView, QGraphicsScene
import os
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
from PyQt5.QtWidgets import QVBoxLayout, QWidget


EARTH_RADIUS_KM = 6371.0  # Earth radius in kilometers

plugin_path = os.path.join(os.path.dirname(sys.executable), "qt", "plugins", "platforms")
os.environ["QT_QPA_PLATFORM_PLUGIN_PATH"] = plugin_path
def quaternion_to_euler(x, y, z, w):
    t0 = +2.0 * (w * x + y * z)
    t1 = +1.0 - 2.0 * (x * x + y * y)
    roll = math.atan2(t0, t1)
    
    t2 = +2.0 * (w * y - z * x)
    t2 = max(-1.0, min(1.0, t2))
    pitch = math.asin(t2)
    
    t3 = +2.0 * (w * z + x * y)
    t4 = +1.0 - 2.0 * (y * y + z * z)
    yaw = math.atan2(t3, t4)
    
    return math.degrees(roll), math.degrees(pitch), math.degrees(yaw)


class IMUSubscriber(Node):
    def __init__(self, callback):
        super().__init__('imu_subscriber')
        self.paused = False
        self.sub = self.create_subscription(
            Odometry,
            "/kf/odom",
            #self.imu_callback,
            self.odom_callback,
            10
        )
        self.callback = callback

    def odom_callback(self, msg):
        orientation = msg.pose.pose.orientation
        roll, pitch, yaw = quaternion_to_euler(orientation.x, 
                                             orientation.y,
                                             orientation.z,
                                             orientation.w)
        angular_z = msg.twist.twist.angular.z
        self.callback(roll, pitch, yaw, angular_z)

    # def imu_callback(self, msg):
    #     if self.paused:
    #         return
    #     try:
    #         roll, pitch, yaw = quaternion_to_euler(
    #             msg.orientation.x,
    #             msg.orientation.y,
    #             msg.orientation.z,
    #             msg.orientation.w
    #         )
    #         self.callback(roll, pitch, yaw)
    #     except Exception as e:
    #         self.get_logger().error(f"IMU error: {e}")

# ============ IMU ADDITIONS END ============

class CameraSubscriber(Node):
    def __init__(self, topic, callback):
        super().__init__('camera_subscriber')
        self.paused = False
        self.sub = self.create_subscription(
            Image,
            topic,
            self.image_callback,
            10  # Removed QoS profile for compatibility
        )
        self.bridge = CvBridge()
        self.callback = callback

    def image_callback(self, msg):
        if self.paused:  # Add pause check
            return
        try:
            cv_image = self.bridge.imgmsg_to_cv2(msg, "bgr8")
            h, w, ch = cv_image.shape
            bytes_per_line = ch * w
            qt_img = QImage(cv_image.data, w, h, bytes_per_line, QImage.Format_RGB888).rgbSwapped()
            print(f"Received image: {w}x{h}")
            self.callback(qt_img)
        except Exception as e:
            print(f"Camera error: {str(e)}")
            self.get_logger().error(f"Camera error: {e}")

# Replace GPSSubscriber with UWBSubscriber
class UWBSubscriber(Node):
    def __init__(self, callback):
        super().__init__('uwb_subscriber')
        self.sub = self.create_subscription(
            Odometry,
            "/kf/odom",
            self.uwb_callback,
            10
        )
        self.callback = callback

    def uwb_callback(self, msg):
        #self.callback(msg.point.x, msg.point.y, msg.point.z)
        x = msg.pose.pose.position.x
        y = msg.pose.pose.position.y
        z = msg.pose.pose.position.z
        self.callback(x, y, z)

# class GPSSubscriber(Node):
#     def __init__(self, callback):
#         super().__init__('gps_subscriber')
#         self.paused = False
#         self.sub = self.create_subscription(
#             NavSatFix,
#             "/wamv/sensors/gps/gps/fix",
#             self.gps_callback,
#             10
#         )
#         self.callback = callback

#     def gps_callback(self, msg):
#         if self.paused:
#             return
#         try:
#             self.callback(msg.latitude, msg.longitude, msg.altitude)
#         except Exception as e:
#             self.get_logger().error(f"GPS error: {e}")
class MatplotlibWidget(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.figure = Figure(figsize=(5, 4), dpi=100)
        self.canvas = FigureCanvas(self.figure)
        self.ax = self.figure.add_subplot(111)
        self.layout = QVBoxLayout(self)
        self.layout.addWidget(self.canvas)
        #self.layout.setContentsMargins(0, 0, 0, 0)  
        #self.setLayout(self.layout)
        
        # Matplotlib style setup
        self.ax.set_facecolor('#ADD8E6')
        self.ax.set_xlabel("")
        self.ax.set_ylabel("")
        self.ax.grid(True)
        self.line, = self.ax.plot([], [], color='#E6E6FA', linewidth=2)
        self.current_point, = self.ax.plot([], [], 'ko', markersize=8)
        self.ax.set_aspect('equal', adjustable='datalim')

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(880, 550)
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")

        self.reference_lat = -33.72281907897446
        self.reference_lon = 150.67395245498903
        self.plot_limits = [0, 10, 0, 10] 
        self.gps_path = []

        self.Home = QtWidgets.QWidget()
        self.Home.setObjectName("Home")

        self.map = MatplotlibWidget(self.Home)
        self.map.setGeometry(QtCore.QRect(30, 150, 600, 200))
        self.map.setObjectName("map")
     
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_plot)
        self.timer.start(100)  
        self.lattitude = QtWidgets.QLabel(self.Home)
        self.lattitude.setGeometry(QtCore.QRect(670, 330, 67, 17))
        self.lattitude.setObjectName("lattitude")
        self.longitude = QtWidgets.QLabel(self.Home)
        self.longitude.setGeometry(QtCore.QRect(670, 380, 67, 17))
        self.longitude.setObjectName("longitude")
        self.altitude = QtWidgets.QLabel(self.Home)
        self.altitude.setGeometry(QtCore.QRect(670, 430, 67, 17))
        self.altitude.setObjectName("altitude")
        self.yaw = QtWidgets.QLabel(self.Home)
        self.yaw.setGeometry(QtCore.QRect(670, 180, 67, 17))
        self.yaw.setObjectName("yaw")
        
        # self.Battery = QtWidgets.QLabel(self.Home)
        # self.Battery.setGeometry(QtCore.QRect(520, 60, 100, 35))
        # self.Battery.setObjectName("Battery")
        
        self.Pitch = QtWidgets.QLabel(self.Home)
        self.Pitch.setGeometry(QtCore.QRect(670, 230, 67, 17))
        self.Pitch.setObjectName("Pitch")
        self.Roll = QtWidgets.QLabel(self.Home)
        self.Roll.setGeometry(QtCore.QRect(670, 280, 67, 17))
        self.Roll.setObjectName("Roll")
        
        self.needle = QtWidgets.QLabel(self.Home)
        self.needle.setGeometry(QtCore.QRect(691, 71, 40, 40))
        self.needle.setObjectName("needle")
        self.needle_original = QPixmap("needle2-removebg-preview.png")
        self.needle_original = self.needle_original.scaled(30, 30, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.needle.setPixmap(self.needle_original)
        self.needle.setAlignment(Qt.AlignCenter)
        self.compass = QtWidgets.QLabel(self.Home)
        self.compass.setGeometry(QtCore.QRect(640, 20, 140, 140))
        self.compass.setObjectName("compass")
        self.compass_pix = QPixmap("compass_back-removebg-preview.png")
        self.compass_pix = self.compass_pix.scaled(101, 101, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.compass.setPixmap(self.compass_pix)
       
        self.compass.setScaledContents(True)
      
        self.needle.setParent(self.Home)
        self.compass.setParent(self.Home)
        # In the Home tab setup section (after compass setup)
        # Add battery progress bar
        self.Battery = QtWidgets.QProgressBar(self.Home)
        self.Battery.setGeometry(QtCore.QRect(400, 53, 130, 25))
        self.Battery.setValue(100)
        self.Battery.setFormat("100%")
        self.Battery.setStyleSheet("""
            QProgressBar {
                border: 1px solid grey;
                border-radius: 5px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #00FF00;
                width: 10px;
            }
        """)

        # Add compass North indicator
        self.north_label = QtWidgets.QLabel(self.Home)
        self.north_label.setGeometry(QtCore.QRect(706, 11, 20, 20))
        self.north_label.setText("N")
        self.north_label.setStyleSheet("color: black; font-weight: bold;")

        # Add mode toggle buttons
        self.mode_frame = QtWidgets.QFrame(self.Home)
        self.mode_frame.setGeometry(QtCore.QRect(50, 40, 220, 50))
        self.mode_layout = QtWidgets.QHBoxLayout(self.mode_frame)

        self.auto_btn = QtWidgets.QPushButton("Auto")
        self.rf_btn = QtWidgets.QPushButton("RF")

        # Style buttons
        self.auto_btn.setStyleSheet("""
            QPushButton {
                background-color: green;
                color: white;
                border: none;
                padding: 5px;
            }
        """)
        self.rf_btn.setStyleSheet("""
            QPushButton {
                background-color: grey;
                color: white;
                border: none;
                padding: 5px;
            }
        """)

        self.mode_layout.addWidget(self.auto_btn)
        self.mode_layout.addWidget(self.rf_btn)

        # Connect button clicks
        def set_auto():
            self.auto_btn.setStyleSheet("background-color: green; color: white;")
            self.rf_btn.setStyleSheet("background-color: grey; color: white;")

        def set_rf():
            self.auto_btn.setStyleSheet("background-color: grey; color: white;")
            self.rf_btn.setStyleSheet("background-color: orange; color: white;")

        self.auto_btn.clicked.connect(set_auto)
        self.rf_btn.clicked.connect(set_rf)

        # Adjust map position to accommodate new elements
        self.map.setGeometry(QtCore.QRect(30, 120, 600, 340))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.yaw.setFont(font)
        self.Roll.setFont(font)
        self.Pitch.setFont(font)
        self.lattitude.setFont(font)
        self.longitude.setFont(font)
        self.altitude.setFont(font)

        self.compass.raise_()
        self.lattitude.raise_()
        self.longitude.raise_()
        self.altitude.raise_()
        self.yaw.raise_()
        self.Battery.raise_()
        self.map.raise_()
        self.Pitch.raise_()
        self.Roll.raise_()
        self.needle.raise_()
        self.tabWidget.addTab(self.Home, "")
        self.tab_8 = QtWidgets.QWidget()
        self.tab_8.setObjectName("tab_8")
        self.Enableconnection = QtWidgets.QCheckBox(self.tab_8)
        self.Enableconnection.setGeometry(QtCore.QRect(110, 70, 271, 61))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(192, 191, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(223, 223, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(96, 96, 94))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(128, 127, 125))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(192, 191, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(223, 223, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(192, 191, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(223, 223, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(96, 96, 94))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(128, 127, 125))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(192, 191, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(223, 223, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(96, 96, 94))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(192, 191, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(223, 223, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(96, 96, 94))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(128, 127, 125))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(96, 96, 94))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(96, 96, 94))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(192, 191, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(192, 191, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(192, 191, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        
        self.Enableconnection.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.Enableconnection.setFont(font)
        self.Enableconnection.setAutoFillBackground(False)
        self.Enableconnection.setObjectName("Enableconnection")
        self.Launch_IMU = QtWidgets.QCheckBox(self.tab_8)
        self.Launch_IMU.setEnabled(True)
        self.Launch_IMU.setGeometry(QtCore.QRect(110, 240, 201, 23))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Launch_IMU.setFont(font)
        self.Launch_IMU.setObjectName("Launch_IMU")
        self.Launch_Camera = QtWidgets.QCheckBox(self.tab_8)
        self.Launch_Camera.setGeometry(QtCore.QRect(470, 90, 221, 23))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Launch_Camera.setFont(font)
        self.Launch_Camera.setObjectName("Launch_Camera")
        self.Launch_GPS = QtWidgets.QCheckBox(self.tab_8)
        self.Launch_GPS.setGeometry(QtCore.QRect(470, 240, 201, 23))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Launch_GPS.setFont(font)
        self.Launch_GPS.setObjectName("Launch_GPS")
        self.Enableconnection.stateChanged.connect(self.toggle_sensor_checkboxes)

        # Initialize launch checkboxes as disabled
        self.Launch_IMU.setEnabled(False)
        self.Launch_Camera.setEnabled(False)
        self.Launch_GPS.setEnabled(False)
        self.tabWidget.addTab(self.tab_8, "")

        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        
        
        self.pausefeed = QtWidgets.QPushButton(self.tab_2)
        self.pausefeed.setGeometry(QtCore.QRect(240, 400, 89, 25))
        self.pausefeed.setObjectName("pausefeed")
        self.Camera1feed = QtWidgets.QLabel(self.tab_2)
        self.Camera1feed.setGeometry(QtCore.QRect(50, 150, 180, 130))
        #self.Camera1feed.setGeometry(QtCore.QRect(30, 160, 161, 121)
        self.Camera1feed.setText("")
        self.Camera1feed.setObjectName("Camera1feed")
        self.Camera2feed = QtWidgets.QLabel(self.tab_2)
        self.Camera2feed.setGeometry(QtCore.QRect(250, 150, 180, 130))
        #self.Camera2feed.setGeometry(QtCore.QRect(220, 150, 191, 141))
        self.Camera2feed.setText("")
        self.Camera2feed.setObjectName("Camera2feed")
        self.Camera3feed = QtWidgets.QLabel(self.tab_2)
        self.Camera3feed.setGeometry(QtCore.QRect(450, 150, 180, 130))
        #self.Camera3feed.setGeometry(QtCore.QRect(450, 150, 161, 131))
        self.Camera3feed.setText("")
        self.Camera3feed.setObjectName("Camera3feed")
         
        
        #feed.setAlignment(QtCore.Qt.AlignCenter)    # self.Camera3feed.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.pausefeed.clicked.connect(self.pause_camera_feeds)
        # In Camera feed initialization (tab_2 setup)

        self.tabWidget.addTab(self.tab_2, "")

        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.label = QtWidgets.QLabel(self.tab_5)
        self.label.setGeometry(QtCore.QRect(20, 30, 91, 41))
        self.label.setText("")
        self.label.setObjectName("label")
        self.startgps = QtWidgets.QPushButton(self.tab_5)
        self.startgps.setGeometry(QtCore.QRect(40, 380, 89, 25))
        self.startgps.setObjectName("startgps")
        self.pausegps = QtWidgets.QPushButton(self.tab_5)
        self.pausegps.setGeometry(QtCore.QRect(160, 380, 89, 25))
        self.pausegps.setObjectName("pausegps")
        self.killgps = QtWidgets.QPushButton(self.tab_5)
        self.killgps.setGeometry(QtCore.QRect(280, 380, 89, 25))
        self.killgps.setObjectName("killgps")
        self.Debug_display = QtWidgets.QLabel(self.tab_5)
        self.Debug_display.setGeometry(QtCore.QRect(470, 200, 341, 221))
        self.Debug_display.setObjectName("Debug_display")
        self.Debug_display.setStyleSheet("""
        QLabel {
            background-color: black;
            color: white;
            padding: 5px;
            font-family: Monospace;
            font-size: 12px;
        }
        """)
        self.Debug_display.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.Debug_display.setText("System initialized\nWaiting for commands...")
        self.start_imu = QtWidgets.QPushButton(self.tab_5)
        self.start_imu.setGeometry(QtCore.QRect(40, 240, 89, 25))
        self.start_imu.setObjectName("start_imu")
        self.start_feed = QtWidgets.QPushButton(self.tab_5)
        self.start_feed.setGeometry(QtCore.QRect(40, 100, 89, 25))
        self.start_feed.setObjectName("start_feed")
        self.pause_imu = QtWidgets.QPushButton(self.tab_5)
        self.pause_imu.setGeometry(QtCore.QRect(160, 240, 89, 25))
        self.pause_imu.setObjectName("pause_imu")
        self.pause_feed = QtWidgets.QPushButton(self.tab_5)
        self.pause_feed.setGeometry(QtCore.QRect(160, 100, 89, 25))
        self.pause_feed.setObjectName("pause_feed")
        self.kill_imu = QtWidgets.QPushButton(self.tab_5)
        self.kill_imu.setGeometry(QtCore.QRect(280, 240, 89, 25))
        self.kill_imu.setObjectName("kill_imu")
        self.kill_feed = QtWidgets.QPushButton(self.tab_5)
        self.kill_feed.setGeometry(QtCore.QRect(280, 100, 89, 25))
        self.kill_feed.setObjectName("kill_feed")
        self.comboBox_2 = QtWidgets.QComboBox(self.tab_5)
        self.comboBox_2.setGeometry(QtCore.QRect(520, 60, 301, 25))
        self.comboBox_2.setObjectName("comboBox_2")
        self.Camera_feeds = QtWidgets.QLabel(self.tab_5)
        self.Camera_feeds.setGeometry(QtCore.QRect(10, 10, 151, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Camera_feeds.setFont(font)
        self.Camera_feeds.setObjectName("Camera_feeds")
        self.label_3 = QtWidgets.QLabel(self.tab_5)
        self.label_3.setGeometry(QtCore.QRect(10, 180, 91, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.tab_5)
        self.label_4.setGeometry(QtCore.QRect(10, 320, 81, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.Camerafeed_1 = QtWidgets.QCheckBox(self.tab_5)
        self.Camerafeed_1.setGeometry(QtCore.QRect(20, 50, 121, 23))
        self.Camerafeed_1.setObjectName("Camerafeed_1")
        self.Camerafeed_2 = QtWidgets.QCheckBox(self.tab_5)
        self.Camerafeed_2.setGeometry(QtCore.QRect(150, 50, 111, 23))
        self.Camerafeed_2.setObjectName("Camerfeed_2")
        self.Camerafeed_3 = QtWidgets.QCheckBox(self.tab_5)
        self.Camerafeed_3.setGeometry(QtCore.QRect(270, 50, 111, 23))
        self.Camerafeed_3.setObjectName("Camerfeed_3")
        self.pause_imu.clicked.connect(self.pause_imu_subscription)
        self.kill_imu.clicked.connect(self.kill_imu_subscription)
        self.pausegps.clicked.connect(self.pause_gps_subscription)
        self.killgps.clicked.connect(self.kill_gps_subscription)
        self.pause_feed.clicked.connect(self.pause_camera_feeds)
        self.kill_feed.clicked.connect(self.kill_camera_feeds)
        self.tabWidget.addTab(self.tab_5, "")

        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.label_35 = QtWidgets.QLabel(self.tab)
        self.label_35.setGeometry(QtCore.QRect(10, 20, 151, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_35.setFont(font)
        self.label_35.setObjectName("label_35")
        self.lineEdit = QtWidgets.QLineEdit(self.tab)
        self.lineEdit.setGeometry(QtCore.QRect(10, 50, 800, 25))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_13 = QtWidgets.QPushButton(self.tab)
        self.pushButton_13.setGeometry(QtCore.QRect(20, 100, 91, 25))
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_15 = QtWidgets.QPushButton(self.tab)
        self.pushButton_15.setGeometry(QtCore.QRect(130, 100, 89, 25))
        self.pushButton_15.setObjectName("pushButton_15")
        self.terminalOutput = QtWidgets.QPlainTextEdit(self.tab)
        self.terminalOutput.setGeometry(QtCore.QRect(10, 190, 821, 211))
        self.terminalOutput.setStyleSheet("background-color: black; color: white; font-family: Monospace;")
        self.terminalOutput.setReadOnly(True)
        self.terminalOutput.setObjectName("terminalOutput")
        self.label_37 = QtWidgets.QLabel(self.tab)
        self.label_37.setGeometry(QtCore.QRect(10, 160, 151, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_37.setFont(font)
        self.label_37.setObjectName("label_37")
        self.terminalOutput = QtWidgets.QPlainTextEdit(self.tab)
        self.terminalOutput.setGeometry(QtCore.QRect(10, 190, 821, 211))
        self.terminalOutput.setObjectName("terminalOutput")

        # Optional styling
        self.terminalOutput.setStyleSheet(
            "background-color: black; color: white; font-family: Monospace;"
        )
        self.terminalOutput.setReadOnly(True)

        self.comboBox = QtWidgets.QComboBox(self.tab)
        self.comboBox.setGeometry(QtCore.QRect(240, 100, 231, 25))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
        self.comboBox.setSizePolicy(sizePolicy)
        self.comboBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("/home/guru-the-lord/Downloads/myenv/bin/python /home/guru-the-lord/Downloads/LOS_final.py")
        self.comboBox.addItem("cd")
        self.comboBox.addItem("ros2 launch vrx_gz competition.launch.py world:=sydney_regatta")
        self.comboBox.addItem("sshpass -p 'password' ssh -tt username@192.168.0.120")
        self.comboBox.currentIndexChanged.connect(
        lambda: self.lineEdit.setText(self.comboBox.currentText())
        )

        self.tabWidget.addTab(self.tab, "")

        self.tab_9 = QtWidgets.QWidget()
        self.tab_9.setObjectName("tab_9")
        self.tabWidget.addTab(self.tab_9, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1187, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # ============ IMU INITIALIZATION ============
        self.imu_sub = None
        self.imu_executor = None
        self.imu_thread = None
        self.start_imu.clicked.connect(self.start_imu_subscription)
        # Camera functionality
        self.camera_subs = []
        self.executor = None
        self.ros_thread = None
        self.active_feeds = [False, False, False]
        self.start_feed.clicked.connect(self.start_camera_feeds)
        self.Camerafeed_1.stateChanged.connect(lambda: self.toggle_feed(0))
        self.Camerafeed_2.stateChanged.connect(lambda: self.toggle_feed(1))
        self.Camerafeed_3.stateChanged.connect(lambda: self.toggle_feed(2))
        self.Camera1feed.setWordWrap(True)
        self.Camera2feed.setWordWrap(True)
        self.Camera3feed.setWordWrap(True)
        self.Camera1feed.setStyleSheet("background-color: black; color: white;")
        self.Camera2feed.setStyleSheet("background-color: black; color: white;")
        self.Camera3feed.setStyleSheet("background-color: black; color: white;")
        # GPS functionality
        self.gps_sub = None
        self.gps_executor = None
        self.gps_thread = None
        self.startgps.clicked.connect(self.start_gps_subscription)
        # ---------------- Terminal Tab Initialization ----------------
        self.codec = QTextCodec.codecForName("UTF-8")
        self.process = QProcess()
        self.process.setProcessChannelMode(QProcess.MergedChannels)
        self.process.readyReadStandardOutput.connect(self.update_terminal)
        self.process.readyReadStandardError.connect(self.update_terminal)
        self.process.start("/bin/bash")
        # self.process = None
        # self.codec = QTextCodec.codecForName("UTF-8")
        self.pushButton_13.clicked.connect(self.execute_command)
        self.pushButton_15.clicked.connect(self.kill_process)
        # --------------------------------------------------------------
    # def convert_to_xy(self, latitude, longitude):
    #     lat_rad = math.radians(latitude)
    #     lon_rad = math.radians(longitude)
    #     ref_lat_rad = math.radians(self.reference_lat)
    #     ref_lon_rad = math.radians(self.reference_lon)
    #     delta_lat = lat_rad - ref_lat_rad
    #     delta_lon = lon_rad - ref_lon_rad
    #     x = delta_lon * EARTH_RADIUS_KM * 1000 * math.cos(ref_lat_rad)
    #     y = delta_lat * EARTH_RADIUS_KM * 1000
    #     return x, y
    
    def toggle_sensor_checkboxes(self, state):
        """Enable/disable sensor checkboxes based on connection state"""
        enable = state == QtCore.Qt.Checked
        self.Launch_IMU.setEnabled(enable)
        self.Launch_Camera.setEnabled(enable)
        self.Launch_GPS.setEnabled(enable)
        
    def update_map_display(self):
        if not self.gps_path:
            return   
        ax = self.map.canvas.ax
        ax.clear()
        
        # Set plot properties
        ax.set_facecolor('#ADD8E6')
        ax.grid(True)
        ax.set_xlabel("")
        ax.set_ylabel("")
        
        # Plot path and current position
        x_vals = [p[0] for p in self.gps_path]
        y_vals = [p[1] for p in self.gps_path]
        
        if len(self.gps_path) > 1:
            ax.plot(x_vals, y_vals, color='#E6E6FA', linewidth=2)
            ax.plot(x_vals[-1], y_vals[-1], 'ko', markersize=8)
            
            # Auto-scale with 10m buffer
            ax.set_xlim(min(x_vals)-10, max(x_vals)+10)
            ax.set_ylim(min(y_vals)-10, max(y_vals)+10)
        
        self.map.canvas.draw_idle()

    def start_imu_subscription(self):
        if self.imu_executor:
            self.imu_executor.shutdown()
        if self.imu_thread and self.imu_thread.is_alive():
            self.imu_thread.join()
        self.imu_paused = False
        self.imu_sub = None
        self.imu_executor = None
        self.imu_thread = None
        """Initialize IMU subscription when Start button is pressed"""
        if not rclpy.ok():
            rclpy.init(args=sys.argv)
        self.imu_executor = rclpy.executors.MultiThreadedExecutor()
        self.imu_sub = IMUSubscriber(self.update_imu_labels)
        self.imu_executor.add_node(self.imu_sub)
        
        # Start fresh thread
        self.imu_thread = threading.Thread(
            target=self.imu_executor.spin,
            daemon=True
        )
        self.imu_thread.start()
        self.update_debug_display("Waiting for IMU data...")
        #self.gps_displayer_2.setText("Waiting for IMU data...")

    def update_imu_labels(self, roll, pitch, yaw,angular_z):
        """Update IMU display labels"""
        QtCore.QMetaObject.invokeMethod(
            self.Roll, 'setText',
            QtCore.Qt.QueuedConnection,
            QtCore.Q_ARG(str, f"Roll: {roll:.2f}°"))
        QtCore.QMetaObject.invokeMethod(
            self.Pitch, 'setText',
            QtCore.Qt.QueuedConnection,
            QtCore.Q_ARG(str, f"Pitch: {pitch:.2f}°"))
        QtCore.QMetaObject.invokeMethod(
            self.yaw, 'setText',
            QtCore.Qt.QueuedConnection,
            QtCore.Q_ARG(str, f"Yaw: {yaw:.2f}°"))
        self.Roll.adjustSize()
        self.Pitch.adjustSize()
        self.yaw.adjustSize()

        transform = QTransform()
        transform.translate(self.needle_original.width()/2, self.needle_original.height()/2)
        transform.rotate(90-yaw)
        transform.translate(-self.needle_original.width()/2, -self.needle_original.height()/2)
        rotated_pix = self.needle_original.transformed(transform, Qt.SmoothTransformation)
        imu_text = f"""Roll: {roll:.2f}°\nPitch: {pitch:.2f}°\nYaw: {yaw:.2f}°"""
        # QtCore.QMetaObject.invokeMethod(
        #     self.gps_displayer_2,
        #     'setText',
        #     QtCore.Qt.QueuedConnection,
        #     QtCore.Q_ARG(str, imu_text))
        QtCore.QMetaObject.invokeMethod(
            self.needle, 'setPixmap',
            QtCore.Qt.QueuedConnection,
            QtCore.Q_ARG(QPixmap, rotated_pix))  
        self.update_debug_display("IMU data streaming")

    def start_gps_subscription(self):
        if self.gps_executor:
            self.gps_executor.shutdown()
        
        self.gps_executor = rclpy.executors.MultiThreadedExecutor()
        self.gps_sub = UWBSubscriber(self.update_uwb_labels)  # Changed to UWB
        self.gps_executor.add_node(self.gps_sub)
        
        self.gps_thread = threading.Thread(
            target=self.gps_executor.spin,
            daemon=True
        )
        self.gps_thread.start()
    #  with self.gps_lock:
    #     self.expecting_first_point = True
    #     if self.gps_executor:
    #         self.gps_executor.shutdown()
    #     if self.gps_thread and self.gps_thread.is_alive():
    #         self.gps_thread.join()
    #     if self.gps_path:
    #         self.first_gps_points.append(self.gps_path[-1])    
    #     self.gps_paused = False
    #     self.gps_sub = None
    #     self.gps_executor = None
    #     self.gps_thread = None
    #     """Initialize GPS subscription when Start button is pressed"""
    #     if not rclpy.ok():
            
    #         rclpy.init(args=sys.argv)
    #     self.gps_executor = rclpy.executors.MultiThreadedExecutor()
    #     self.gps_sub = GPSSubscriber(self.update_gps_labels)
    #     self.gps_executor.add_node(self.gps_sub)
        
    #     # Start fresh thread
    #     self.gps_thread = threading.Thread(
    #         target=self.gps_executor.spin,
    #         daemon=True
    #     )
    #     self.gps_thread.start()
        self.update_debug_display("Waiting for GPS data...")

    def update_uwb_labels(self, x,y,z):
        QtCore.QMetaObject.invokeMethod(
        self.lattitude, 'setText',
        QtCore.Qt.QueuedConnection,
        QtCore.Q_ARG(str, f"X: {x:.2f} m")
        )
        QtCore.QMetaObject.invokeMethod(
            self.longitude, 'setText',
            QtCore.Qt.QueuedConnection,
            QtCore.Q_ARG(str, f"Y: {y:.2f} m")
        )
        QtCore.QMetaObject.invokeMethod(
            self.altitude, 'setText',
            QtCore.Qt.QueuedConnection,
            QtCore.Q_ARG(str, f"Z: {z:.2f} m")
        )
        # """Update GPS display labels"""
        # QtCore.QMetaObject.invokeMethod(
        #     self.lattitude, 'setText',
        #     QtCore.Qt.QueuedConnection,
        #     QtCore.Q_ARG(str, f"Lat: {lat:.6f}°"))
        # QtCore.QMetaObject.invokeMethod(
        #     self.longitude, 'setText',
        #     QtCore.Qt.QueuedConnection,
        #     QtCore.Q_ARG(str, f"Lon: {lon:.6f}°"))
        # QtCore.QMetaObject.invokeMethod(
        #     self.altitude, 'setText',
        #     QtCore.Qt.QueuedConnection,
        #     QtCore.Q_ARG(str, f"Alt: {alt:.2f} m"))
        self.lattitude.adjustSize()
        self.longitude.adjustSize()
        self.altitude.adjustSize()
        # x, y = self.convert_to_xy(lat, lon)
        with self.gps_lock: 
            self.gps_path.append((x, y))
            window_size = 200
            threshold = 0.1
            if self.expecting_first_point:
            # Add first valid point after restart
             if (x,y) not in self.first_restart_points:
                self.first_restart_points.append((x,y))
            self.expecting_first_point = False  # Reset flag
            # Check if we need to clean up

            if len(self.gps_path) > window_size:
                # Check oldest points first
                for i in range(0, len(self.gps_path)-window_size+1, window_size):
                    cluster = self.gps_path[i:i+window_size]
                    # Check if all points in cluster are within threshold
                    base_x, base_y = cluster[0]
                    if all(math.hypot(p[0]-base_x, p[1]-base_y) < threshold 
                        for p in cluster[1:]):
                        del self.gps_path[i:i+window_size]
                        break  # Remove only one cluster per update
            
            # Fallback to FIFO if still too long
            if len(self.gps_path) > 5000:
                del self.gps_path[0:len(self.gps_path)-5000]
        self.update_debug_display("GPS data streaming")
        
    def update_plot(self):
        
        with self.gps_lock:
            current_path = list(self.gps_path)  # Copy while locked
        
        if not current_path:
            return
        ax = self.map.ax
        ax.clear()
        
        # Set plot properties
        ax.set_facecolor('#ADD8E6')
        ax.grid(True)
        ax.set_xlabel("")
        ax.set_ylabel("")
        
        if self.gps_path:
          x_vals = [p[0] for p in self.gps_path]
          y_vals = [p[1] for p in self.gps_path]
          ax.scatter(x_vals, y_vals, color='#E6E6FA', s=10)
    
    # Plot permanent red markers
        if self.last_killed_points:
          x_killed = [p[0] for p in self.last_killed_points]
          y_killed = [p[1] for p in self.last_killed_points]
          ax.scatter(x_killed, y_killed, color='red', s=30, label='Kill Points')
    
    # Plot permanent green markers
        if self.first_restart_points:
          x_restart = [p[0] for p in self.first_restart_points]
          y_restart = [p[1] for p in self.first_restart_points]
          ax.scatter(x_restart, y_restart, color='green', s=30, label='Restart Points')
        
        ax.set_xlim(min(x_vals) - 10, max(x_vals) + 10)
        ax.set_ylim(min(y_vals) - 10, max(y_vals) + 10)
        
        self.map.canvas.draw_idle()

    def toggle_feed(self, index):
        # self.active_feeds[index] = getattr(self, f"Camerafeed_{index+1}").isChecked()
        # if not self.active_feeds[index]:
        #     self.clear_feed(index)

        self.active_feeds[index] = self.Camerafeed_1.isChecked() if index == 0 else \
            self.Camerafeed_2.isChecked() if index == 1 else \
            self.Camerafeed_3.isChecked()
        if not self.active_feeds[index]:
            self.clear_feed(index)
        state = "enabled" if self.active_feeds[index] else "disabled"
        self.update_debug_display(f"Camera feed {index+1} {state}")
    def clear_feed(self, index):
        labels = [self.Camera1feed, self.Camera2feed, self.Camera3feed]
        labels[index].setPixmap(QPixmap())
        labels[index].setText("Feed Disabled")
        labels[index].setStyleSheet("background-color: black; color: white;")
        # labels = [self.Camera1feed, self.Camera2feed, self.Camera3feed]
        # labels[index].setPixmap(QPixmap())
        # labels[index].setText("Feed Disabled")
        # labels[index].setStyleSheet("background-color: black; color: white;")

    def start_camera_feeds(self):
        if not rclpy.ok():
            rclpy.init(args=sys.argv)
        if self.executor is None:
            self.executor = rclpy.executors.MultiThreadedExecutor()
        self.camera_subs.clear()
        topics = [
            "/wamv/sensors/cameras/front_left_camera_sensor/image_raw",
            "/wamv/sensors/cameras/front_right_camera_sensor/image_raw",
            "/wamv/sensors/cameras/middle_right_camera_sensor/image_raw"
        ]
        for i in range(3):
            if getattr(self, f"Camerafeed_{i+1}").isChecked():
                callback = lambda img, idx=i: self.update_feed(img, idx)
                sub = CameraSubscriber(topics[i], callback)
                self.camera_subs.append(sub)
                self.executor.add_node(sub)
        if not self.ros_thread or not self.ros_thread.is_alive():
            self.ros_thread = threading.Thread(target=self.executor.spin, daemon=True)
            self.ros_thread.start()
        active_feeds = [i+1 for i in range(3) if getattr(self, f"Camerafeed_{i+1}").isChecked()]
        if active_feeds:
            feeds = ', '.join(map(str, active_feeds))
            self.update_debug_display(f"Started Camera feeds: {feeds}")
        else:
            self.update_debug_display("No camera feeds selected")
    def execute_command(self):
        """Execute the command entered in the terminal"""
        command = self.lineEdit.text().strip()
        if not command:
            return
        try:
            #self.process.start("/bin/bash",["-c", command])
            self.process.write((command+"\n").encode('utf-8'))
        except Exception as e:
            self.append_output("Error: " + str(e))

    def kill_process(self):
        if self.process and self.process.state() == QProcess.Running:
            try:
                # Send Ctrl+C equivalent to interrupt current process
                self.process.write(b'\x03')
                self.append_output("\n[Process interrupted]")
                
                # Clear any queued commands
                self.process.terminate()
                self.process.waitForFinished(1000)
                self.process.start("/bin/bash")  # Restart shell
                
            except Exception as e:
                self.append_output(f"\nError interrupting process: {str(e)}")
        # """Kill the currently running process"""
        # if self.process and self.process.state() == QProcess.Running:
        #     try:
        #         # Send Ctrl+C equivalent
        #         self.process.write(b'\x03')
        #         self.append_output("\n[Process interrupted]")
        #     except Exception as e:
        #         self.append_output(f"\nError interrupting process: {str(e)}")
        # if self.process is not None and self.process.state() == QProcess.Running:
        #     self.process.kill()
        #     self.append_output("\nProcess killed by user")

    def update_terminal(self):
        """Update the terminal output display"""
        data = self.process.readAllStandardOutput()
        text = self.codec.toUnicode(data)
        self.append_output(text)
    def __init__(self):
        # Add state tracking variables
        self.gps_lock = threading.Lock()
        self.gps_path = []
        self.last_gps_points = []  # Stores all red points
        self.first_gps_points = []  # Stores all green points
        self.gps_active = False  # Track GPS state
        self.gps_restart_pending = False 
        self.camera_paused = False
        self.imu_paused = False
        self.gps_paused = False
        self.last_killed_points = []  # Stores red points from kills
        self.first_restart_points = []  # Stores green points from restarts
        self.expecting_first_point = False  # Flag for restart detection
    # Camera Module Modifications
    def pause_camera_feeds(self):
        if self.camera_subs:
            self.camera_paused = True
            for sub in self.camera_subs:
                sub.paused = True
        self.update_debug_display("Camera feeds paused")
    def kill_camera_feeds(self):
        if self.executor:
            # Shutdown all camera subscribers
            for sub in self.camera_subs:
                self.executor.remove_node(sub)
                sub.destroy_node()
            self.camera_subs.clear()
            # Shutdown executor
            self.executor.shutdown()
            self.executor = None
        
        if self.ros_thread and self.ros_thread.is_alive():
            self.ros_thread.join(timeout=2)
        
        # Clear GUI displays
        self.clear_all_feeds()
        self.camera_paused = False
        # Reset buttons
        self.pausefeed.setText("Suspend")
        self.pause_feed.setText("Suspend")
        self.update_debug_display("Killed all Camera feeds")
        
    def clear_all_feeds(self):
        for i in range(3):
            self.clear_feed(i)

    # IMU Module Modifications
    def pause_imu_subscription(self):
        for label in [self.Camera1feed, self.Camera2feed, self.Camera3feed]:
            label.setPixmap(QPixmap())
            label.setText("Feed Disabled")
            label.setStyleSheet("background-color: black; color: white;")
        # if self.imu_sub:
        #     self.imu_paused = True
        #     self.imu_sub.paused = True
        self.update_debug_display("IMU feed paused")
    def kill_imu_subscription(self):
        if self.imu_executor:
            self.imu_executor.shutdown()
        if self.imu_thread and self.imu_thread.is_alive():
            self.imu_thread.join()
        QtCore.QMetaObject.invokeMethod(
        self.Roll, 'setText',
        QtCore.Qt.QueuedConnection,
        QtCore.Q_ARG(str, "Roll: "))
    
        QtCore.QMetaObject.invokeMethod(
            self.Pitch, 'setText',
            QtCore.Qt.QueuedConnection,
            QtCore.Q_ARG(str, "Pitch: "))
        
        QtCore.QMetaObject.invokeMethod(
            self.yaw, 'setText',
            QtCore.Qt.QueuedConnection,
            QtCore.Q_ARG(str, "Yaw: "))
        # self.imu_sub = None
        # self.imu_executor = None
        # self.imu_thread = None
    #   QtCore.QMetaObject.invokeMethod(
    #     self.gps_displayer_2,
    #     'setText',
    #     QtCore.Qt.QueuedConnection,
    #     QtCore.Q_ARG(str, "IMU Node Killed")
    # )
    
        # Reset orientation display
        QtCore.QMetaObject.invokeMethod(
            self.needle, 'setPixmap',
            QtCore.Qt.QueuedConnection,
            QtCore.Q_ARG(QPixmap, self.needle_original)
        )
        self.imu_paused = False
        self.imu_sub = None
        self.imu_executor = None
        self.imu_thread = None
        self.update_debug_display("IMU feed killed")
    # GPS Module Modifications
    def pause_gps_subscription(self):
        if self.gps_sub:
            self.gps_paused = True
            self.gps_sub.paused = True
        self.update_debug_display("GPS feed paused")
    def update_debug_display(self, message):
        """Thread-safe update of debug display"""
        QtCore.QMetaObject.invokeMethod(
            self.Debug_display, 'setText',
            QtCore.Qt.QueuedConnection,
            QtCore.Q_ARG(str, message)
        )

    def kill_gps_subscription(self):
        if self.gps_path:
        # Record last point before kill as red
            last_point = self.gps_path[-1]
            if last_point not in self.last_killed_points:
                self.last_killed_points.append(last_point)
                
        if self.gps_executor:
            self.gps_executor.shutdown()
        if self.gps_thread and self.gps_thread.is_alive():
            self.gps_thread.join()

        QtCore.QMetaObject.invokeMethod(
        self.lattitude, 'setText',
        QtCore.Qt.QueuedConnection,
        QtCore.Q_ARG(str, "Latitude: "))
    
        QtCore.QMetaObject.invokeMethod(
            self.longitude, 'setText',
            QtCore.Qt.QueuedConnection,
            QtCore.Q_ARG(str, "Longitude: "))
        
        QtCore.QMetaObject.invokeMethod(
            self.altitude, 'setText',
            QtCore.Qt.QueuedConnection,
            QtCore.Q_ARG(str, "Altitude: "))
        self.gps_paused = False
        self.gps_sub = None
        self.gps_executor = None
        self.gps_thread = None
        self.update_debug_display("GPS feed killed")
# self.gps_sub = None
        # self.gps_executor = None
        # self.gps_thread = None
    #     QtCore.QMetaObject.invokeMethod(
    #     self.gps_displayer,
    #     'setText',
    #     QtCore.Qt.QueuedConnection,
    #     QtCore.Q_ARG(str, "GPS Node Killed")
    # )

    @pyqtSlot(str)
    def append_output(self, text):
        """Thread-safe output appending"""
        QtCore.QMetaObject.invokeMethod(
            self.terminalOutput,
            'appendPlainText',
            QtCore.Qt.QueuedConnection,
            QtCore.Q_ARG(str, text)
    )
        cursor = self.terminalOutput.textCursor()
        cursor.movePosition(QtGui.QTextCursor.End)
        self.terminalOutput.setTextCursor(cursor)

    @pyqtSlot(QImage, int)
    def update_feed(self, img, index):
        labels = [self.Camera1feed, self.Camera2feed, self.Camera3feed]
        if self.active_feeds[index]:
            buffer = QBuffer()
            buffer.open(QBuffer.ReadWrite)
            img.save(buffer, "PNG")
            pixmap = QPixmap()
            pixmap.loadFromData(buffer.data(), "PNG")
            pixmap = QPixmap.fromImage(img).scaled(
                labels[index].width(),
                labels[index].height(),
                QtCore.Qt.KeepAspectRatio)
            labels[index].setPixmap(pixmap)
            labels[index].setText("")
        else:
            self.clear_feed(index)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
  
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ARITRA ASV GUI"))
        self.lattitude.setText(_translate("MainWindow", "X: "))
        self.longitude.setText(_translate("MainWindow", "Y: "))
        self.altitude.setText(_translate("MainWindow", "Z: "))
        # self.lattitude.setText(_translate("MainWindow", "Latitude: "))
        # self.longitude.setText(_translate("MainWindow", "Longitude: "))
        # self.altitude.setText(_translate("MainWindow", "Altitude: "))
        self.yaw.setText(_translate("MainWindow", "Yaw: "))
        self.compass.setText(_translate("MainWindow", ""))
        
        
        self.Pitch.setText(_translate("MainWindow", "Pitch: "))
        self.Roll.setText(_translate("MainWindow", "Roll: "))
        self.needle.setText(_translate("MainWindow", ""))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Home), _translate("MainWindow", "Home"))
        self.Enableconnection.setText(_translate("MainWindow", "Enable Connection with ASV"))
        self.Launch_IMU.setText(_translate("MainWindow", "Launch IMU"))
        self.Launch_Camera.setText(_translate("MainWindow", "Launch Camera"))
        self.Launch_GPS.setText(_translate("MainWindow", "Launch GPS"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_8), _translate("MainWindow", "Launch Sensors"))
        self.pausefeed.setText(_translate("MainWindow", "Suspend"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Camera Module"))
        self.startgps.setText(_translate("MainWindow", "Start"))
        self.pausegps.setText(_translate("MainWindow", "Suspend"))
        self.killgps.setText(_translate("MainWindow", "Kill"))
        self.Debug_display.setText(_translate("MainWindow", "TextLabel"))
        self.start_imu.setText(_translate("MainWindow", "Start"))
        self.start_feed.setText(_translate("MainWindow", "Start"))
        self.pause_imu.setText(_translate("MainWindow", "Suspend"))
        self.pause_feed.setText(_translate("MainWindow", "Suspend"))
        self.kill_imu.setText(_translate("MainWindow", "Kill"))
        self.kill_feed.setText(_translate("MainWindow", "Kill"))
        self.Camera_feeds.setText(_translate("MainWindow", "Camera_feeds"))
        self.label_3.setText(_translate("MainWindow", "IMU_data"))
        self.label_4.setText(_translate("MainWindow", "GPS_data"))
        self.Camerafeed_1.setText(_translate("MainWindow", "Camerafeed_1"))
        self.Camerafeed_2.setText(_translate("MainWindow", "Camerfeed_2"))
        self.Camerafeed_3.setText(_translate("MainWindow", "Camerfeed_3"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("MainWindow", "Sensor topics"))
        self.label_35.setText(_translate("MainWindow", "Terminal Commands"))
        self.pushButton_13.setText(_translate("MainWindow", "Enter"))
        self.pushButton_15.setText(_translate("MainWindow", "Kill"))
        self.label_37.setText(_translate("MainWindow", "Debugging window"))
        #self.label_38.setText(_translate("MainWindow", "TextLabel"))
        self.comboBox.setItemText(0, _translate("MainWindow", ""))
        self.comboBox.setItemText(1, _translate("MainWindow", "/home/guru-the-lord/Downloads/myenv/bin/python /home/guru-the-lord/Downloads/LOS_final.py"))
        self.comboBox.setItemText(2, _translate("MainWindow", "ls"))
        self.comboBox.setItemText(3, _translate("MainWindow", "ros2 launch vrx_gz competition.launch.py world:=sydney_regatta"))
        self.comboBox.setItemText(4, _translate("MainWindow", "sshpass -p 'password' ssh -tt username@192.168.0.120"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Terminal"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_9), _translate("MainWindow", "Help"))


if __name__ == "__main__":
    rclpy.init(args=sys.argv)
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    try:
        sys.exit(app.exec_())
    finally:
        if rclpy.ok():
            rclpy.shutdown()
